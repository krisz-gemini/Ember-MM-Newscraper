Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.IO
Imports System.Windows.Forms
Imports EmberAPI
Imports NLog

Public Class PosterTemplateHelper

    Shared logger As Logger = NLog.LogManager.GetCurrentClassLogger()

    Private Const UNOUCHED_POSTER_TEMP_FILENAME = "untouched-poster-{0}.jpg"
    Private Const UNOUCHED_POSTER_FILENAME_POSTFIX = "untouchedposter"
    Private Const EDITED_POSTER_TEMP_FILENAME = "edited-poster.jpg"

    Const POSTER_TEMPLATE_FILENAME_POSTFIX = "postertemplate.xml"
    Const OVERLAY_FILENAME_POSTFIX = "overlay"


    Friend Shared Function DetectTemplate(ByVal dbElement As Database.DBElement, Optional autogenerateIfEnabled As Boolean = False) As PosterTemplateWithPath
        'Movie
        Dim templatePath = PosterTemplateHelper.GetSaveExtrasPathForMovie(dbElement, {POSTER_TEMPLATE_FILENAME_POSTFIX})(0)
        If File.Exists(templatePath) Then
            Return New PosterTemplateWithPath(PosterTemplate.Load(templatePath), templatePath)
        End If

        'Containing folder and parents
        Dim directoryPath As String = Path.GetDirectoryName(dbElement.Filename)
        While FileUtils.Common.IsAscendantOrTheSamePath(directoryPath, dbElement.Source.Path)
            templatePath = Path.Combine(directoryPath, POSTER_TEMPLATE_FILENAME_POSTFIX)
            If File.Exists(templatePath) Then
                Return New PosterTemplateWithPath(PosterTemplate.Load(templatePath), templatePath)
            End If
            directoryPath = Path.GetDirectoryName(directoryPath)
        End While

        'FIXME: detect template by Movie

        If autogenerateIfEnabled Then
            If PosterEditor._autoGeneratePosterTemplatePath IsNot Nothing Then
                Return New PosterTemplateWithPath(PosterTemplate.Load(PosterEditor._autoGeneratePosterTemplatePath), PosterEditor._autoGeneratePosterTemplatePath)
            ElseIf PosterEditor._autoGenerateWithDefaultTemplate Then
                Return PosterTemplateHelper.LoadAutoGenerationDefaultTemplate()
            End If
        End If

        Return Nothing
    End Function

    Shared Function LoadTestTemplate() As PosterTemplateWithPath
        Return LoadInternalTemplate("test-" & POSTER_TEMPLATE_FILENAME_POSTFIX)
    End Function

    Shared Function LoadAutoGenerationDefaultTemplate() As PosterTemplateWithPath
        Return LoadInternalTemplate("autogenerated-" & POSTER_TEMPLATE_FILENAME_POSTFIX)
    End Function

    Private Shared Function LoadInternalTemplate(name As String) As PosterTemplateWithPath
        Dim templatePath = Path.Combine(Functions.AppPath, "Modules", "generic.EmberCore.PosterEditor".ToLower(), "Templates", "MoviePoster", name)
        If Not File.Exists(templatePath) Then
            logger.Warn("Intenal template not found: {0}", templatePath)
            Return Nothing
        Else
            Return New PosterTemplateWithPath(PosterTemplate.Load(templatePath), templatePath)
        End If
    End Function

    Friend Shared Function GetUntouchedPosterTempPath(dbElement As Database.DBElement) As String
        Return Path.Combine(Master.TempPath, String.Format(UNOUCHED_POSTER_TEMP_FILENAME, dbElement.ID))
    End Function

    Friend Shared Function GetSaveExtrasPathForMovie(tmpDBElement As Database.DBElement, filenamePostfixes As String()) As String()
        Dim fPath As String = tmpDBElement.Filename
        Dim fileName As String = Path.GetFileNameWithoutExtension(fPath)
        Dim fileNameStack As String = Path.GetFileNameWithoutExtension(FileUtils.Common.RemoveStackingMarkers(fPath))
        'Dim filePath As String = Path.Combine(Directory.GetParent(fPath).FullName, fileName)
        Dim filePathStack As String = Path.Combine(Directory.GetParent(fPath).FullName, fileNameStack)
        'Dim fileParPath As String = Directory.GetParent(filePath).FullName

        Dim isVideoTS As Boolean = FileUtils.Common.isVideoTS(fPath)
        Dim isBDRip As Boolean = FileUtils.Common.isBDRip(fPath)
        Dim isVideoTSFile As Boolean = fileName.ToLower = "video_ts"

        Dim basePath As String = Nothing
        If isVideoTS OrElse isBDRip Then
            basePath = FileUtils.Common.GetMainPath(fPath).FullName
        End If

        Dim result(filenamePostfixes.Length) As String
        If isVideoTS Then
            For i As Integer = 0 To filenamePostfixes.Length - 1
                result(i) = Path.Combine(basePath, filenamePostfixes(i))
            Next
        ElseIf isBDRip Then
            For i As Integer = 0 To filenamePostfixes.Length - 1
                result(i) = Path.Combine(basePath, filenamePostfixes(i))
            Next
        ElseIf tmpDBElement.IsSingle Then
            'save with the name of the movie in this case as well
            For i As Integer = 0 To filenamePostfixes.Length - 1
                result(i) = String.Concat(filePathStack, "-" + filenamePostfixes(i))
            Next
        Else
            For i As Integer = 0 To filenamePostfixes.Length - 1
                result(i) = String.Concat(filePathStack, "-" + filenamePostfixes(i))
            Next
        End If

        Return result
    End Function

    Friend Shared Function GetUntouchedPathForMovie(dbEelement As Database.DBElement, extension As String) As String
        Return GetSaveExtrasPathForMovie(dbEelement, {UNOUCHED_POSTER_FILENAME_POSTFIX})(0) & extension
    End Function

    Friend Shared Function GetExistingUntouchedBaseFilePathForMovie(dbEelement As Database.DBElement) As String
        Dim pathWithoutExtension As String = GetSaveExtrasPathForMovie(dbEelement, {UNOUCHED_POSTER_FILENAME_POSTFIX})(0)
        For Each ext In {".jpg", ".jpeg", ".png"}
            Dim path As String = pathWithoutExtension & ext
            If File.Exists(path) Then
                Return path
            End If
        Next
        Return Nothing
    End Function


    Shared Sub SaveTemplateToMovie(movie As Database.DBElement, template As PosterTemplate, overlayImagePath As String, Optional confirmOverwrite As Boolean = True)
        Dim paths = PosterTemplateHelper.GetSaveExtrasPathForMovie(movie, {POSTER_TEMPLATE_FILENAME_POSTFIX, OVERLAY_FILENAME_POSTFIX})
        SaveTemplateTo(paths(0), paths(1), template, overlayImagePath, confirmOverwrite)
    End Sub

    Shared Sub SaveTemplateIntoContainingFolder(folder As String, template As PosterTemplate, overlayImagePath As String, Optional confirmOverwrite As Boolean = True)

        Dim templateSavePath = Path.Combine(folder, POSTER_TEMPLATE_FILENAME_POSTFIX)
        Dim overlaySavePathWithoutExtension = Path.Combine(folder, OVERLAY_FILENAME_POSTFIX)

        SaveTemplateTo(templateSavePath, overlaySavePathWithoutExtension, template, overlayImagePath, confirmOverwrite)
    End Sub


    Private Shared Sub SaveTemplateTo(templateSavePath As String, overlaySavePathWithoutExtension As String, template As PosterTemplate, overlayImagePath As String, Optional confirmOverwrite As Boolean = True)
        Try
            Dim existingOverlay As String = Nothing
            Dim overlaySavePath As String = Nothing
            Dim overwrites = New List(Of String)
            If template.Image.Enabled Then
                overlaySavePath = overlaySavePathWithoutExtension & Path.GetExtension(overlayImagePath)
                template.Image.Filename = Path.GetFileName(overlaySavePath)
                If File.Exists(overlaySavePath) Then
                    overwrites.Add(overlaySavePath)
                End If
            End If

            If File.Exists(templateSavePath) Then
                overwrites.Add(templateSavePath)
                Try
                    Dim existingTemplate = PosterTemplate.Load(templateSavePath)
                    If Not String.IsNullOrWhiteSpace(existingTemplate.Image.Filename) Then
                        existingOverlay = Path.Combine(Path.GetDirectoryName(templateSavePath), existingTemplate.Image.Filename)
                        If Not existingOverlay.Equals(overlaySavePath) AndAlso File.Exists(existingOverlay) Then
                            overwrites.Add(existingOverlay)
                        Else
                            existingOverlay = Nothing
                        End If
                    End If
                Catch ex As Exception
                    'not a valid template? => we don't need to check image overwrite
                End Try

            End If

            If overwrites.Count > 0 Then
                'FIXME: internationalization 
                Dim confirmTitle = "Do you want to override earlier template?"
                Dim confirmMessage = "These files will be overwritten: {0}"

                confirmMessage = String.Format(confirmMessage, Environment.NewLine & Strings.Join(overwrites.ToArray, ", " & Environment.NewLine))
                If confirmOverwrite Then
                    Dim result As DialogResult = MessageBox.Show(confirmMessage, confirmTitle, MessageBoxButtons.YesNo)
                    If result = DialogResult.No Then
                        Return
                    End If
                End If
            End If

            PosterTemplate.Save(template, templateSavePath)

            If template.Image.Enabled Then
                If overlaySavePath IsNot Nothing Then
                    If overlayImagePath <> overlaySavePath Then
                        File.Copy(overlayImagePath, overlaySavePath, True)
                    End If
                Else
                    logger.Error("[CODE-ERROR] Overlay image is enabled but overlaySavePath is nothing.")
                End If
            Else
                If overlaySavePath IsNot Nothing Then
                    File.Delete(overlaySavePath)
                End If
            End If

            If existingOverlay IsNot Nothing Then
                File.Delete(existingOverlay)
            End If

        Catch ex As Exception
            logger.Error(ex, "Cannot save template to: {0}, message={1}", templateSavePath, ex.Message)
            'FIXME: internationalization 
            MsgBox(String.Format("Cannot save template: {0}", ex.Message))
        Finally
        End Try
    End Sub

    Shared Function ToInt(n As Double) As Integer
        Return CInt(Math.Round(n, MidpointRounding.AwayFromZero))
    End Function

    Shared Function DrawPosterForSave(untouchedPoster As Image, twp As PosterTemplateWithPath, posterOffset As Point) As Image
        Return DrawPosterForSave(untouchedPoster, twp.Template, LoadOverlayFromTemplate(twp), posterOffset)
    End Function


    Private Shared Function LoadOverlayFromTemplate(twp As PosterTemplateWithPath) As Image
        Dim template = twp.Template
        If template.Image.Enabled Then
            If Not String.IsNullOrWhiteSpace(twp.Template.Image.Filename) Then
                Dim overlayPath As String = Nothing
                Try
                    overlayPath = Path.Combine(Path.GetDirectoryName(twp.Path), template.Image.Filename)
                    Return LoadImageFromFile(overlayPath)
                Catch ex As Exception
                    'TODO: report to user?
                    logger.Error(ex, "Cannot load ovarlay image {0} ", overlayPath)
                    Throw ex
                End Try
            Else
                logger.Error("Poster template doesn't contains ImageName {0} ", twp.Path)
                Throw New ArgumentException(String.Format("Poster template doesn't contains ImageName {0} ", twp.Path))
            End If
        Else
            Return Nothing
        End If
    End Function


    Shared Function DrawPosterForSave(untouchedPoster As Image, template As PosterTemplate, overlayImage As Image, posterOffset As Point) As Image
        Dim resultImage As Image = Nothing
        If untouchedPoster IsNot Nothing Then
            Dim cropRectangle As Rectangle = Nothing
            If template.CropEnabled Then
                If untouchedPoster.Height >= untouchedPoster.Width * template.PosterRatio.Ratio Then
                    Dim h = ToInt(untouchedPoster.Width * template.PosterRatio.Ratio)
                    cropRectangle = New Rectangle(0, ToInt((untouchedPoster.Height - h) / 2), untouchedPoster.Width, h)
                Else
                    Dim w = ToInt(untouchedPoster.Height / template.PosterRatio.Ratio)
                    cropRectangle = New Rectangle(ToInt((untouchedPoster.Width - w) / 2), 0, w, untouchedPoster.Height)
                End If
            End If

            Dim imageToDraw As Image
            If cropRectangle = Nothing Then
                resultImage = New Bitmap(untouchedPoster.Width, untouchedPoster.Height)
            Else
                resultImage = New Bitmap(cropRectangle.Width, cropRectangle.Height)
            End If
            imageToDraw = resultImage

            Dim g As Graphics
            g = Graphics.FromImage(imageToDraw)
            g.Clear(template.BackgroundColor)

            Dim zoom As ZoomFactor
            Dim overlayRectangle As Rectangle
            If template.CropEnabled Then
                'draw cropped image

                cropRectangle.X -= posterOffset.X
                cropRectangle.Y -= posterOffset.Y

                zoom = New ZoomFactor(New Size(imageToDraw.Width, imageToDraw.Height), cropRectangle.Size)
                Dim scaledRectangle As Rectangle

                'cropRectangle will be on the top left corner after draw
                scaledRectangle = zoom.GetScaledRectangle(New Rectangle(New Point(0, 0), cropRectangle.Size))

                g.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBicubic
                g.PixelOffsetMode = Drawing2D.PixelOffsetMode.HighQuality
                g.CompositingQuality = Drawing2D.CompositingQuality.HighQuality
                g.DrawImage(untouchedPoster, scaledRectangle, cropRectangle, GraphicsUnit.Pixel)

                overlayRectangle = scaledRectangle
            Else
                'draw full image
                zoom = New ZoomFactor(New Size(imageToDraw.Width, imageToDraw.Height), untouchedPoster.Size)
                Dim renderedRectangle = zoom.GetScaledImageRectangle()
                renderedRectangle.X += ToInt(posterOffset.X * zoom.GetScaleFactor())
                renderedRectangle.Y += ToInt(posterOffset.Y * zoom.GetScaleFactor())
                g.DrawImage(untouchedPoster, renderedRectangle)
                If template.CropEnabled Then
                    overlayRectangle = zoom.GetScaledRectangle(cropRectangle)
                Else
                    overlayRectangle = zoom.GetScaledImageRectangle()
                End If
            End If

            DrawOverlay(template, overlayImage, g, overlayRectangle)

        End If
        Return resultImage
    End Function

    Private Shared Sub DrawOverlay(template As PosterTemplate, overlayImage As Image, g As Graphics, overlayRectangle As Rectangle)
        If template.Image.Enabled Then
            Dim overlayHeight As Integer
            Dim overlayWidth As Integer
            Select Case template.Image.HorizontalAlignment
                Case PosterTemplate.HorizontalAlignment.Stretch
                    If template.Image.VerticalAlignment = PosterTemplate.VerticalAlignment.Stretch Then
                        overlayHeight = overlayRectangle.Height
                    Else
                        overlayHeight = ToInt(overlayRectangle.Width * (overlayImage.Height / overlayImage.Width))
                    End If
                    overlayWidth = overlayRectangle.Width
                Case Else
                    If template.Image.VerticalAlignment = PosterTemplate.VerticalAlignment.Stretch Then
                        overlayHeight = overlayRectangle.Height
                        overlayWidth = ToInt(overlayRectangle.Height * (overlayImage.Width / overlayImage.Height))
                    Else
                        'overlayHeight = ToInt(overlayImage.Height * (overlayRectangle.Width / template.Image.DesignedForWidth))
                        'overlayWidth = ToInt(overlayImage.Width * (overlayRectangle.Width / template.Image.DesignedForWidth))

                        overlayHeight = ToInt((overlayRectangle.Width * template.Image.WidthPercent / 100) * (overlayImage.Height / overlayImage.Width))
                        overlayWidth = ToInt(overlayRectangle.Width * template.Image.WidthPercent / 100)
                    End If
            End Select

            If template.Image.HorizontalAlignment = HorizontalAlignment.Center Then
                overlayRectangle.X += ToInt((overlayRectangle.Width - overlayWidth) / 2)
            ElseIf template.Image.HorizontalAlignment = HorizontalAlignment.Right Then
                overlayRectangle.X += overlayRectangle.Width - overlayWidth
            End If
            overlayRectangle.Width = overlayWidth

            If template.Image.VerticalAlignment = PosterTemplate.VerticalAlignment.Middle Then
                overlayRectangle.Y += ToInt((overlayRectangle.Height - overlayHeight) / 2)
            ElseIf template.Image.VerticalAlignment = PosterTemplate.VerticalAlignment.Bottom Then
                overlayRectangle.Y += (overlayRectangle.Height - overlayHeight)
            End If
            overlayRectangle.Height = overlayHeight

            g.DrawImage(overlayImage, overlayRectangle)
        End If

    End Sub

    Shared Function DrawPosterForEdit(imageToDraw As Image, untouchedPoster As Image, template As PosterTemplate, overlayImage As Image, posterOffset As Point, drawSettings As DrawSettings) As Rectangle
        If untouchedPoster IsNot Nothing Then

            Dim cropRectangle As Rectangle = Nothing
            If untouchedPoster.Height >= untouchedPoster.Width * template.PosterRatio.Ratio Then
                Dim h = ToInt(untouchedPoster.Width * template.PosterRatio.Ratio)
                cropRectangle = New Rectangle(0, ToInt((untouchedPoster.Height - h) / 2), untouchedPoster.Width, h)
            Else
                Dim w = ToInt(untouchedPoster.Height / template.PosterRatio.Ratio)
                cropRectangle = New Rectangle(ToInt((untouchedPoster.Width - w) / 2), 0, w, untouchedPoster.Height)
            End If

            'If pbPoster.Image Is Nothing Then
            '    pbPoster.Image = New Bitmap(pbPoster.Width, pbPoster.Height)
            'End If
            'imageToDraw = pbPoster.Image

            Dim g As Graphics
            g = Graphics.FromImage(imageToDraw)
            'FIXME: inspects the calculation of pixels, DrawRectangle(0,0, z,z) draws out of the image
            'g.InterpolationMode = Drawing2D.InterpolationMode.HighQualityBicubic
            'g.PixelOffsetMode = Drawing2D.PixelOffsetMode.HighQuality
            'g.CompositingQuality = Drawing2D.CompositingQuality.HighQuality
            g.Clear(template.BackgroundColor)

            Dim zoom As ZoomFactor
            Dim overlayRectangle As Rectangle
            If template.CropEnabled AndAlso drawSettings.PreviewCropping Then
                'draw cropped image

                cropRectangle.X -= posterOffset.X
                cropRectangle.Y -= posterOffset.Y

                zoom = New ZoomFactor(New Size(imageToDraw.Width - 2 * drawSettings.BorderSize, imageToDraw.Height - 2 * drawSettings.BorderSize), cropRectangle.Size)
                Dim scaledRectangle As Rectangle

                'cropRectangle will be on the top left corner after draw
                'scaledRectangle = zoom.GetScaledRectangle(New Rectangle(New Point(borderSize, borderSize), cropRectangle.Size))
                scaledRectangle = zoom.GetScaledRectangle(New Rectangle(New Point(0, 0), cropRectangle.Size))
                scaledRectangle.X += drawSettings.BorderSize
                scaledRectangle.Y += drawSettings.BorderSize

                g.DrawImage(untouchedPoster, scaledRectangle, cropRectangle, GraphicsUnit.Pixel)

                overlayRectangle = scaledRectangle


                If drawSettings.ShowCropBorder Then
                    scaledRectangle.X -= drawSettings.BorderSize
                    scaledRectangle.Y -= drawSettings.BorderSize
                    ' -1 due to operation of DrawRectangle method 
                    scaledRectangle.Width += 2 * drawSettings.BorderSize - 1
                    scaledRectangle.Height += 2 * drawSettings.BorderSize - 1
                    g.DrawRectangle(drawSettings.CropBorderPen, scaledRectangle)
                End If
            Else
                'draw full image
                zoom = New ZoomFactor(New Size(imageToDraw.Width - 2 * drawSettings.BorderSize, imageToDraw.Height - 2 * drawSettings.BorderSize), untouchedPoster.Size)
                Dim renderedRectangle = zoom.GetScaledImageRectangle()
                renderedRectangle.X += drawSettings.BorderSize + ToInt(posterOffset.X * zoom.GetScaleFactor())
                renderedRectangle.Y += drawSettings.BorderSize + ToInt(posterOffset.Y * zoom.GetScaleFactor())
                g.DrawImage(untouchedPoster, renderedRectangle)
                If template.CropEnabled AndAlso drawSettings.ShowCropBorder Then
                    'drow crop border
                    Dim scaledRectangle = zoom.GetScaledRectangle(cropRectangle)
                    ' we've moved the image, so we don't have to move the rectangle 
                    ' scaledRectangle.X -= borderSize
                    ' scaledRectangle.Y -= borderSize
                    ' -1 due to operation of DrawRectangle method 
                    scaledRectangle.Width += 2 * drawSettings.BorderSize - 1
                    scaledRectangle.Height += 2 * drawSettings.BorderSize - 1
                    g.DrawRectangle(drawSettings.CropBorderPen, scaledRectangle)
                End If

                If template.CropEnabled Then
                    overlayRectangle = zoom.GetScaledRectangle(cropRectangle)
                    overlayRectangle.X += drawSettings.BorderSize
                    overlayRectangle.Y += drawSettings.BorderSize
                Else
                    overlayRectangle = zoom.GetScaledImageRectangle()
                End If
            End If

            DrawOverlay(template, overlayImage, g, overlayRectangle)

            Return cropRectangle

        End If
    End Function

    Shared Function SavePosterToTemp(poster As Image) As String
        Dim tempPosterPath As String = Path.Combine(Master.TempPath, EDITED_POSTER_TEMP_FILENAME)
        poster.Save(tempPosterPath)
        Return tempPosterPath
    End Function

    Shared Function ApplyTemplateToBaseImage(baseImage As Image, dbElement As Database.DBElement, template As PosterTemplate, overlayImage As Image, posterOffset As Point, Optional silent As Boolean = False) As Image
        Return ApplyTemplateToBaseImage(baseImage, True, dbElement, template, overlayImage, posterOffset, silent)
    End Function

    Private Shared Function ApplyTemplateToBaseImage(baseImage As Image, isValidUntouchedImage As Boolean, dbElement As Database.DBElement, template As PosterTemplate, overlayImage As Image, posterOffset As Point, Optional silent As Boolean = False) As Image
        Try
            Dim poster = DrawPosterForSave(baseImage, template, overlayImage, posterOffset)
            If poster Is Nothing Then
                Return Nothing
            End If

            ExifHelper.SetExifInfo(poster)

            If PosterEditor._saveUntouchedPosters AndAlso isValidUntouchedImage AndAlso Not ExifHelper.HasExifInfo(baseImage) Then
                If TypeOf baseImage.Tag IsNot ImageFileInfo OrElse DirectCast(baseImage.Tag, ImageFileInfo).IsModified() Then
                    baseImage.Save(GetUntouchedPathForMovie(dbElement, DetectImageExtension(baseImage, ".jpg")))
                End If
            End If

            Return poster
        Catch ex As Exception
            logger.Error(ex, "Cannot apply poster template for movie: {0}, message={1}", dbElement.Filename, ex.Message)
            'FIXME: internationalization 
            If Not silent Then
                MsgBox(String.Format("Cannot save poster: {0}", ex.Message))
            End If
            Return Nothing
        End Try
    End Function

    Shared Function ApplyTemplateToPoster(dbElement As Database.DBElement, twp As PosterTemplateWithPath, Optional useUntouchedPosterIfNeeded As Boolean = True, Optional silent As Boolean = False, Optional ByRef generatedBaseImage As ImageResult = Nothing) As Image
        Dim overlayImage As Image = Nothing
        Try
            Try
                overlayImage = LoadOverlayFromTemplate(twp)
            Catch ex As Exception
                logger.Error(ex, "Cannot load overlay from template: {0}", twp.Path)
                If Not silent Then
                    'FIXME: internationalization 
                    MsgBox(String.Format("Cannot load overlay from template: {0}", twp.Path))
                End If
                Return Nothing
            End Try
            Return ApplyTemplateToPoster(dbElement, twp.Template, overlayImage, Nothing, useUntouchedPosterIfNeeded, silent, generatedBaseImage)
        Finally
            If overlayImage IsNot Nothing Then
                overlayImage.Dispose()
            End If
        End Try
    End Function

    Shared Function ApplyTemplateToPoster(dbElement As Database.DBElement, template As PosterTemplate, overlayImage As Image, posterOffset As Point, Optional useUntouchedPosterIfNeeded As Boolean = True, Optional silent As Boolean = False, Optional ByRef generatedBaseImage As ImageResult = Nothing) As Image
        Dim disposables As List(Of IDisposable) = New List(Of IDisposable)
        Try
            'Detect or create baseImage to draw on
            dbElement.ImagesContainer.Poster.LoadAndCache(Enums.ContentType.Movie, True, True)
            Dim baseImageToDraw As Image = Nothing
            Dim isValidUntouchedImage As Boolean
            Dim currentPoster As Image = dbElement.ImagesContainer.Poster.ImageOriginal.Image
            If currentPoster Is Nothing OrElse (useUntouchedPosterIfNeeded AndAlso ExifHelper.HasExifInfo(currentPoster)) Then
                If useUntouchedPosterIfNeeded Then
                    Dim untouchedBasedImagePath = GetExistingUntouchedBaseFilePathForMovie(dbElement)
                    If untouchedBasedImagePath IsNot Nothing Then
                        baseImageToDraw = Image.FromFile(untouchedBasedImagePath)
                        isValidUntouchedImage = False
                        disposables.Add(baseImageToDraw)
                    End If
                End If
                If baseImageToDraw Is Nothing Then
                    baseImageToDraw = GenerateBaseImageByTemplate(template, dbElement)
                    isValidUntouchedImage = False
                    If generatedBaseImage IsNot Nothing Then
                        generatedBaseImage.image = baseImageToDraw
                    Else
                        disposables.Add(baseImageToDraw)
                    End If
                End If
            Else
                baseImageToDraw = currentPoster
                isValidUntouchedImage = True
            End If

            Dim poster = ApplyTemplateToBaseImage(baseImageToDraw, isValidUntouchedImage, dbElement, template, overlayImage, posterOffset, silent)

            Return poster
        Catch ex As Exception
            logger.Error(ex, "Cannot apply poster template for movie: {0}, message={1}", dbElement.Filename, ex.Message)
            'FIXME: internationalization 
            If Not silent Then
                MsgBox(String.Format("Cannot save poster: {0}", ex.Message))
            End If
            Return Nothing
        Finally
            SafeDispose(disposables)
        End Try
    End Function

    Shared Function GenerateBaseImageByTemplate(template As PosterTemplate, dbElement As Database.DBElement) As Image
        'FIXME: create default poster by template
        Dim posterToDraw As Image = VideoUtils.GrabFrameByPercentToImage(dbElement.Filename, 50)
        If posterToDraw Is Nothing Then
            posterToDraw = New Bitmap(1920, 1080)
        End If

        Return posterToDraw
    End Function

    ''' <summary>
    ''' Loads this Image from the contents of the supplied file. 
    ''' Image.FromFile() keep the file open, so we use this method to avoid it.
    ''' </summary>
    ''' <param name="strPath">Path to the image file</param>
    ''' <param name="bLoadBitmap">Create bitmap from memorystream</param>
    ''' <remarks></remarks>
    Public Shared Function LoadImageFromFile(strPath As String) As Image
        If Not String.IsNullOrEmpty(strPath) Then
            Dim fiImage As FileInfo = Nothing
            Try
                fiImage = New FileInfo(strPath)
            Catch ex As Exception
                logger.Error(String.Format("Cannot access image path: (0) ""(1)""", ex.Message, strPath))
                Return Nothing
            End Try

            If Not fiImage.Exists Then
                logger.Error(String.Format("File ""{0}"" not found", strPath))
                Return Nothing
            ElseIf fiImage.Length > 0 Then
                Dim _ms = New MemoryStream()
                Dim _image As Image = Nothing
                Using fsImage As FileStream = New FileStream(strPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)
                    Dim memStream As New MemoryStream
                    memStream.SetLength(fsImage.Length)
                    fsImage.Read(memStream.GetBuffer, 0, CInt(Fix(fsImage.Length)))
                    _ms.Write(memStream.GetBuffer, 0, CInt(Fix(fsImage.Length)))
                    _ms.Flush()
                    If _ms.Length > 0 Then
                        _image = New Bitmap(_ms)
                        Return _image
                    Else
                        logger.Error(String.Format("File ""{0}"" is empty", strPath))
                        Return Nothing
                    End If
                End Using
            Else
                logger.Error(String.Format("File ""{0}"" is empty", strPath))
                Return Nothing
            End If
        Else
            logger.Error("Path is empty")
            Return Nothing
        End If
    End Function


    Class DrawSettings

        Property BorderSize As Integer
        Property CropBorderPen As Pen

        Property ShowCropBorder As Boolean
        Property PreviewCropping As Boolean

    End Class

    Shared Function DetectImageExtension(img As Image, Optional defaultValue As String = Nothing) As String
        If ImageFormat.Jpeg.Equals(img.RawFormat) Then
            Return ".jpg"
        ElseIf ImageFormat.Gif.Equals(img.RawFormat) Then
            Return ".gif"
        ElseIf ImageFormat.Tiff.Equals(img.RawFormat) Then
            Return ".tiff"
        ElseIf ImageFormat.Png.Equals(img.RawFormat) Then
            Return ".png"
        ElseIf ImageFormat.Bmp.Equals(img.RawFormat) Then
            Return ".bmp"
        End If
        Return defaultValue
    End Function

    Public Shared Sub SafeDispose(d As IDisposable)
        Try
            If d IsNot Nothing Then
                d.Dispose()
            End If
        Catch ex As Exception
            logger.Warn(ex, "An error occurred on dispose: {0}", d)
        End Try
    End Sub

    Public Shared Sub SafeDispose(ByRef disposables As List(Of IDisposable))
        If disposables Is Nothing Then
            Return
        End If
        For Each d In disposables
            If d IsNot Nothing Then
                Try
                    d.Dispose()
                Catch ex As Exception
                    logger.Warn(ex, "An error occurred on dispose: {0}", d)
                End Try
            End If
        Next
    End Sub

    Friend Shared Sub SafeDelete(path As String)
        If path IsNot Nothing Then
            Try
                File.Delete(path)
            Catch ex As Exception
                logger.Error(ex, "Error during delete file: {0}", path)
            End Try
        End If
    End Sub


#Region "Nested Types"
    Public Class ZoomFactor
        Private containerSize As Size
        Private imageSize As Size

        Private scaleFactor As Double

        Sub New(containerSize As Size, imageSize As Size)
            Me.containerSize = containerSize
            Me.imageSize = imageSize
            scaleFactor = Math.Min(containerSize.Width / imageSize.Width, containerSize.Height / imageSize.Height)
        End Sub

        Public Function GetScaledImageSize() As Size
            Return GetScaledSize(imageSize)
        End Function

        Public Function GetScaledSize(size As Size) As Size
            Return New Size(ToInt(size.Width * scaleFactor), ToInt(size.Height * scaleFactor))
        End Function

        Public Function GetScaleFactor() As Double
            Return scaleFactor
        End Function

        'resize AND shift
        Public Function GetScaledRectangle(rectangle As Rectangle) As Rectangle
            Dim zoomedSelectionRect = New Rectangle(ToInt(rectangle.X * scaleFactor), ToInt(rectangle.Y * scaleFactor),
                       ToInt(rectangle.Width * scaleFactor), ToInt(rectangle.Height * scaleFactor))
            Dim scaledImageShift = GetScaledImageShift()
            zoomedSelectionRect.Location = New Point(zoomedSelectionRect.Location.X + scaledImageShift.X, zoomedSelectionRect.Location.Y + scaledImageShift.Y)
            Return zoomedSelectionRect
        End Function

        Public Function GetScaledImageShift() As Point
            Dim scaledImageSize = GetScaledImageSize()
            Return New Point(ToInt((containerSize.Width - scaledImageSize.Width) / 2), ToInt((containerSize.Height - scaledImageSize.Height) / 2))
        End Function

        Public Function GetScaledImageRectangle() As Rectangle
            Return GetScaledRectangle(New Rectangle(0, 0, imageSize.Width, imageSize.Height))
        End Function
    End Class

#End Region '"Nested Types"


End Class


Public Class ImageResult
    Property image As Image
End Class


Public Class ImageFileInfo
    Property Path As String
    Property LastWriteTimeUtc As Date

    Sub New(path As String)
        If Not File.Exists(path) Then
            Throw New FileNotFoundException(path)
        End If
        Me.Path = path
        Me.LastWriteTimeUtc = File.GetLastWriteTimeUtc(path)
    End Sub

    Friend Function IsModified() As Boolean
        Return Not File.Exists(Path) OrElse Me.LastWriteTimeUtc <> File.GetLastWriteTimeUtc(Path)
    End Function
End Class
